```python
from itertools import combinations

def shortest_title_length(K, Rn, Pn, Sn, P, S, root_words, prefixes, suffixes):
    root_words = [tuple(r.split()) for r in root_words]
    prefixes = [tuple(p.split()) for p in prefixes]
    suffixes = [tuple(s.split()) for s in suffixes]
    
    root_words = [(r, int(s)) for r, s in root_words]
    prefixes = [(p, int(s)) for p, s in prefixes]
    suffixes = [(s, int(s)) for s, s in suffixes]
    
    min_length = float('inf')
    
    for root, root_score in root_words:
        if root_score > K:
            continue
        for p_count in range(min(P, Pn) + 1):
            for s_count in range(min(S, Sn) + 1):
                for p_comb in combinations(prefixes, p_count):
                    for s_comb in combinations(suffixes, s_count):
                        total_score = root_score + sum(p[1] for p in p_comb) + sum(s[1] for s in s_comb)
                        if total_score == K:
                            length = len(root) + sum(len(p[0]) for p in p_comb) + sum(len(s[0]) for s in s_comb)
                            min_length = min(min_length, length)
    return min_length

# Example usage:
# K, Rn, Pn, Sn, P, S = 10, 2, 2, 2, 1, 1
# root_words = ["root1 5", "root2 3"]
# prefixes = ["pre1 2", "pre2 1"]
# suffixes = ["suf1 3", "suf2 1"]
# print(shortest_title_length(K, Rn, Pn, Sn, P, S, root_words, prefixes, suffixes))
```