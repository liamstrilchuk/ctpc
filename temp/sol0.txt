```javascript
function findShortestTitle(K, Rn, Pn, Sn, P, S, roots, prefixes, suffixes) {
    const rootScores = roots.map(r => r.split(' ')).map(([word, score]) => ({ word, score: parseInt(score) }));
    const prefixScores = prefixes.map(p => p.split(' ')).map(([word, score]) => ({ word, score: parseInt(score) }));
    const suffixScores = suffixes.map(s => s.split(' ')).map(([word, score]) => ({ word, score: parseInt(score) }));

    let minLength = Infinity;

    function combineAffixes(affixes, maxCount, currentScore, currentAffixes, index, scoreNeeded, callback) {
        if (currentScore === scoreNeeded) {
            callback(currentAffixes);
            return;
        }
        if (index >= affixes.length || currentScore > scoreNeeded || currentAffixes.length >= maxCount) {
            return;
        }
        combineAffixes(affixes, maxCount, currentScore, currentAffixes, index + 1, scoreNeeded, callback);
        combineAffixes(affixes, maxCount, currentScore + affixes[index].score, currentAffixes.concat(affixes[index]), index + 1, scoreNeeded, callback);
    }

    rootScores.forEach(root => {
        const rootScore = root.score;
        const remainingScore = K - rootScore;
        if (remainingScore < 0) return;

        combineAffixes(prefixScores, P, 0, [], 0, remainingScore, selectedPrefixes => {
            const scoreWithPrefixes = selectedPrefixes.reduce((acc, p) => acc + p.score, 0);
            if (scoreWithPrefixes > remainingScore) return;

            combineAffixes(suffixScores, S, 0, [], 0, remainingScore - scoreWithPrefixes, selectedSuffixes => {
                const totalLength = root.word.length +
                    selectedPrefixes.reduce((acc, p) => acc + p.word.length, 0) +
                    selectedSuffixes.reduce((acc, s) => acc + s.word.length, 0);
                if (totalLength < minLength) {
                    minLength = totalLength;
                }
            });
        });
    });

    return minLength;
}
```